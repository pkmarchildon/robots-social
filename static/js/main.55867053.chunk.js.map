{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","state","searchInput","a","fetch","promise","json","users","this","setState","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAKF,EAAMG,QAAQC,KACnBC,IAAG,+BAA0BL,EAAMG,QAAQC,KAAxC,mBAEL,mCAAMJ,EAAMG,QAAQC,KAApB,OACA,kCAAKJ,EAAMG,QAAQG,MAAnB,WCPOC,EAAW,SAACP,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQO,UCLdC,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJVG,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALH,E,4FASd,8BAAAC,EAAA,sEACwBC,MAAM,8CAD9B,cACQC,EADR,gBAEsBA,EAAQC,OAF9B,OAEQC,EAFR,OAGEC,KAAKC,SAAS,CAAEjB,SAAUe,IAH5B,gD,0EAMA,WAAU,IAAD,OACP,EAAkCC,KAAKP,MAA/BT,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZQ,EAAmBlB,EAASmB,QAAO,SAACxB,GAAD,OACvCA,EAAQC,KAAKwB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK3B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACEW,YAAY,gBACZC,aAAc,SAACiB,GAAD,OAAO,EAAKL,SAAS,CAAEP,YAAaY,EAAEC,OAAOC,WAE7D,cAAC,EAAD,CAAUxB,SAAUkB,W,GA5BVO,aAkCHjB,IC3BAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.55867053.chunk.js","sourcesContent":["import React from 'react';\nimport './card.component.style.css';\n\nexport const Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt={props.monster.name}\n        src={`https://robohash.org/${props.monster.name}?size=180x180`}\n      />\n      <h2> {props.monster.name} </h2>\n      <p> {props.monster.email} </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className='search'\n      type='search'\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchInput: ''\n    };\n  }\n  // When the component is being loaded on the page the 1st time, execute this\n  async componentDidMount() {\n    const promise = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await promise.json();\n    this.setState({ monsters: users });\n  }\n\n  render() {\n    const { monsters, searchInput } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchInput.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Robots Rolodex</h1>\n        <SearchBox\n          placeholder='search robots'\n          handleChange={(e) => this.setState({ searchInput: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}